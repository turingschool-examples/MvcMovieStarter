using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MvcMovie.DataAccess;
using MvcMovie.Models;

namespace MvcMovie.Controllers
{
    public class MoviesController : Controller
    {
        private readonly MvcMovieContext _context;

        public MoviesController(MvcMovieContext context)
        {
            _context = context;
        }

        // GET: /Movies
        public IActionResult Index(string genre)
        {
            Console.WriteLine("YAY the genre!");
            Console.WriteLine(genre);
            //I don't know if this asEnumerable is good practice, but it works...
            var movies = _context.Movies.AsEnumerable();
            if (genre != null)
            {
                //Add the genre to view data
                movies = movies.Where(m => m.Genre == genre);
            }
            //Stretch goal of capitalization problems...

            return View(movies);
        }

        // GET: /Movies/1
        [Route("Movies/{id:int}")]
        public IActionResult Show(int id)
        {
            var movie = _context.Movies.Find(id);

            return View(movie);
        }

        // GET: /Movies/New
        public IActionResult New()
        {
            return View();
        }

        // POST: /Movies
        [HttpPost]
        public IActionResult Index(Movie movie)
        {
            //Take the movie sent in the request and save it to the database
            _context.Movies.Add(movie);
            _context.SaveChanges();

            // The id generated by the database is now on the object we added to the context
            var newMovieId = movie.Id;

            // Redirect to our route /movies/show and pass in the newMovieId for the id parameter
            return RedirectToAction("show", new { id = newMovieId });
        }
    }
}
