using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MvcMovie.DataAccess;
using MvcMovie.Models;

namespace MvcMovie.Controllers
{
    public class MoviesController : Controller
    {
        private readonly MvcMovieContext _context;

        public MoviesController(MvcMovieContext context)
        {
            _context = context;
        }

        // GET: /Movies
        public IActionResult Index()
        {
            // Do we want to pass in a list instead of a whatever innumerable it is by default?
            var movies = _context.Movies;
            return View(movies);
        }

        //This annotation makes the route /Movies/1 which we want, not /Movies/Show/1
        // GET: /Movies/1
        [Route("Movies/{id:int}")]
        public IActionResult Show(int id)
        {
            var movie = _context.Movies.Find(id);

            // Still need to deal with error case of if the id cannot be found. Right now the app crashes...
            return View(movie);
        }

        // GET: /Movies/New
        public IActionResult New()
        {
            return View();
        }

        //Should we be taking in the whole movie object here, or specify the title and genre, I think the whole thing...
        // POST: /Movies
        [HttpPost]
        public IActionResult Index(Movie movie)
        {
            // Do we want to use the repository pattern, or put it all in the controller for now? I'm thinking controller first, then maybe break out out.
            //var newProduct = _productRepository.CreateProduct(product);
            _context.Add(movie);
            _context.SaveChanges();

            // The id generated by the DB is now on the object you passed in.
            var newMovieId = movie.Id;

            // Redirect the user to a page that shows the new product
            return RedirectToAction("Show", new { id = newMovieId });
        }
    }
}
