@model IEnumerable<Movie>

@* 
By default, the values stored in ViewData are of type object, which allows flexibility in storing various types of data.

When you pass a list to ViewData["AllGenres"], it gets stored as an object in ViewData. Therefore, when you retrieve it using ViewData["AllGenres"], the type of the value is object, not specifically List<string>.

To work with the list as a List<string>, you need to explicitly cast the value to the desired type.

The null coalescing operator ?? is used to provide a default value of an empty List<string>() in case the cast to List<string> results in null. This ensures that allGenres will always have a valid reference to a list, even if ViewData["AllGenres"] is null or not of the expected type.
*@

@{
    List<string> allGenres = ViewData["AllGenres"] as List<string> ?? new List<string>();
}

<h1>Movies</h1>

<h2>Genre Filter</h2>

@if (ViewData["SearchGenre"] != null)
{
    <p>Filtering by: <strong>@ViewData["SearchGenre"]</strong> </p>
}
  
<h3>Genres:</h3>

@if (allGenres.Count > 0)
{
    foreach (var genre in allGenres)
    {
        <a href="/movies?genre=@genre">@genre</a>
    }
} else
{
    <p>No genres available.</p>
}
<br />
<a href="/movies">Clear Filter</a>

<br/>
<br />

@foreach (var movie in Model)
{
    <p>Title: @movie.Title, Genre: @movie.Genre, Id: @movie.Id</p>
}



